
剑指 Offer 31. 栈的压入、弹出序列

输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否为该栈的弹出顺序。
假设压入栈的所有数字均不相等。
例如，序列 {1,2,3,4,5} 是某栈的压栈序列，序列 {4,5,3,2,1} 是该压栈序列对应的一个弹出序列，但 {4,3,5,1,2} 就不可能是该压栈序列的弹出序列。


import java.util.*;

class Solution {
    // 将数组转换成单链表
    private List<Integer> intArrayToList (int[] array) {
        List<Integer> list = new ArrayList<>();
        for (int i = 0; i < array.length; i++) {
            list.add(array[i]);
        }
        return list;
    }
    public boolean validateStackSequences(int[] pushed, int[] popped) {
        // 实现准备的栈
        Deque<Integer> stack = new LinkedList<>();
        // 数组转链表
        List<Integer> pushList = intArrayToList(pushed);
        List<Integer> popList = intArrayToList(popped);

        while (!popList.isEmpty()) {
            // p 为弹出序列的第一个数字
            int p = popList.remove(0);
            while (true) {
                // 栈为空，或栈顶元素不等于p
                if (stack.isEmpty() || stack.peek() != p) {
                    if (pushList.isEmpty()) {
                        return false;
                    }
                    int q = pushList.remove(0);
                    stack.push(q);
                } else {
                    break;
                }
            }
            // 弹出栈顶元素
            stack.pop();
        }
        return true;
    }
}







