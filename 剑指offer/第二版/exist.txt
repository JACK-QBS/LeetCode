class Solution {
    public boolean exist(char[][] board, String word) {
        char[] arr = word.toCharArray();
        for (int i = 0;i < board.length; i++) {
            for (int j = 0; j < board[0].length;j++) {
                //找到并传入单词的第一个字母位置
                if (dfs(board,arr,i,j,0)) {
                    return true;
                }
            }
        }
        return false;
    }
    // i、j为当前元素坐标，k是单词中第几个字母
    public boolean dfs(char[][] board,char[] arr,int i,int j,int k) {
        //越界、或者两者不相等，直接返回
        if (i < 0 || j < 0 || i >= board.length || j >= board[0].length || board[i][j] != arr[k]) {
            return false;
        }
        //单词中的字母全部找到了
        if (k == arr.length - 1) {
            return true;
        }
        board[i][j] = '\0';
        //查找当前元素的上下左右的元素
        boolean res = dfs(board,arr,i+1,j,k+1) || dfs(board,arr,i,j+1,k+1) || dfs(board,arr,i-1,j,k+1) ||
                      dfs(board,arr,i,j-1,k+1);
        board[i][j] = arr[k];
        return res;
    }
}